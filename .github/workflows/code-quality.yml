# -*- coding: utf-8 -*-
name: Code Quality & Security Checks

on:
  push:
    branches: [ main, develop, chore/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ experiments/ --exclude="experiments/archive/deprecated"
        
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src/ experiments/ --skip-glob="experiments/archive/deprecated/*"
        
    - name: Lint with flake8
      run: |
        flake8 src/ experiments/
        
    - name: Lint with pylint
      run: |
        pylint src/ --fail-under=8.0
        
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security & Dependency Checks  
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pip-audit pipdeptree
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ experiments/ -f json -o bandit-report.json -x experiments/archive/deprecated
      continue-on-error: true
      
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Run pip-audit vulnerability scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true
      
    - name: Generate dependency tree
      run: |
        pipdeptree --json > dependency-tree.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          dependency-tree.json
        retention-days: 30

  performance:
    name: Performance & Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Analyze codebase size
      run: |
        echo "## 📊 Codebase Analysis" >> size-report.md
        echo "### Source Code Lines" >> size-report.md
        find src/ -name "*.py" -exec wc -l {} + | tail -1 >> size-report.md
        echo "### Experiment Code Lines" >> size-report.md  
        find experiments/ -name "*.py" -not -path "*/archive/deprecated/*" -exec wc -l {} + | tail -1 >> size-report.md
        echo "### Directory Sizes" >> size-report.md
        du -sh src/ experiments/ config/ >> size-report.md
        
    - name: Check for large files
      run: |
        echo "## 📁 Large Files (>1MB)" >> size-report.md
        find . -type f -size +1M -not -path "./.git/*" -not -path "./.*" >> size-report.md || echo "No large files found" >> size-report.md
        
    - name: Upload size analysis
      uses: actions/upload-artifact@v3
      with:
        name: size-analysis-${{ github.run_id }}
        path: size-report.md
        retention-days: 30

  smoke-test:
    name: Smoke Test Registry System
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Test Registry imports
      run: |
        python -c "from src.registry.model_registry import get_model_registry; print('✅ Registry import OK')"
        
    - name: Test experiment imports
      run: |
        python -c "from experiments.prototypes.basic_model_test import BasicModelTester; print('✅ Experiment imports OK')"
        
    - name: Test Registry functionality (without actual LLM calls)
      run: |
        python -c "
        from src.registry.model_registry import get_model_registry
        registry = get_model_registry('development')
        models = registry.list_available_models()
        roles = registry.list_available_roles()
        print(f'✅ Available models: {list(models.keys())}')
        print(f'✅ Available roles: {list(roles.keys())}')
        print('✅ Registry functionality test passed')
        "